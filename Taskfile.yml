# https://taskfile.dev/#/installation

# To use this Taskfile on Windows, add Git\bin (or git\usr\bin) to PATH.
# This allows using Git's sh.exe to run posix shell commands.
#
# To add git to the path just for the current powershell session:
#* $Env:Path += ";$Env:ProgramFiles\Git\bin";

version: "3"
tasks:
  ##### CI #####
  build:frontend:
    desc: Build front-end
    dir: ./memos-upstream/web
    vars:
      SRC: ./dist
      DST: ../../build
    sources:
      - ./src/**/*
      - ./pnpm-lock.yaml
    generates:
      - "{{.DST}}/dist/**/*"
    cmds:
      - silent: true
        cmd: |
          sh -c '
            echo -e "\e[36mCleaning up leftovers...\e[0m"
            rm -rf "{{.SRC}}"
            rm -rf "{{.DST}}/{{.SRC}}"
            mkdir -p "{{.DST}}"
          '
      - pnpm i --frozen-lockfile
      - pnpm type-gen
      - pnpm build
      - silent: true
        cmd: |
          echo -e "\e[36mMoving front-end build...\e[0m"
          sh -c 'mv -f "{{.SRC}}" "{{.DST}}"'
          if ! [ -d "{{.DST}}" ]; then
            echo -e "\n\e[31m>> Front-end build failed! <<\e[0m"
            exit 1
          fi
          echo -e "\n\e[32m>> Front-end build succeeded. <<\e[0m"

  build:backend-tidy:
    desc: Tidy backend dependencies
    dir: ./memos-upstream
    cmds:
      - go mod tidy -go=1.21
    sources:
      - go.{mod,sum}

  post-build:snapshot:compress:
    desc: Compress built binaries
    summary: |
      - Create compressed archives containing built binaries and dist folder
      Goreleaser doesn't compress snapshot builds, so we do it manually.
    deps:
      - build:frontend
    cmds:
      - silent: true
        cmd: |
          for dir in ./build/backend/memos*; do
            if ! [ -d "$dir" ]; then
              continue
            fi

            sh -c "rm -rf ${dir//\\//}/dist"
            sh -c "( mv -f ./build/dist ${dir//\\//}/ ) || ( sleep 2 && mv -f ./build/dist ${dir//\\//}/ )"

            filename=$(sh -c "basename ${dir//\\//}")
            echo -e "\e[36mCompressing $filename...\e[0m"

            error=1
            if [[ $filename == *"windows"* ]]; then
              if ! [ -z $(command -v 7za) ]; then
                sh -c "cd ${dir//\\//}; 7za -tzip a ../../$filename.zip *" > /dev/null
                error=$?
              elif ! [ -z $(command -v zip) ]; then
                sh -c "cd ${dir//\\//}; zip -r ../../$filename.zip *" > /dev/null
                error=$?
              elif ! [ -z $(command -v powershell) ]; then
                powershell -Command "Compress-Archive -Force -Path ${dir//\\//}/* -DestinationPath ./build/$filename.zip"
                error=$?
              elif ! [ -z $(command -v pwsh) ]; then
                pwsh -Command "Compress-Archive -Force -Path ${dir//\\//}/* -DestinationPath ./build/$filename.zip"
                error=$?
              fi
            fi

            if [[ $error -ne 0 ]]; then
              sh -c "cd ${dir//\\//}; tar -czf $filename.tar.gz *"
              sh -c "mv -f ${dir//\\//}/$filename.tar.gz ./build/$filename.tar.gz"
            fi

            sh -c "( mv -f ${dir//\\//}/dist ./build/ ) || ( sleep 2 && mv -f ${dir//\\//}/dist ./build/ )"
          done
    sources:
      - ./build/backend/memos-*/**/*
    generates:
      - "*.{zip,tar.gz}"

  post-build:snapshot:gen-checksums:
    desc: Generate checksums for compressed files
    summary: |
      - Create sha256sums.txt file
      Goreleaser doesn't generate checksums for snapshot builds, so we do it manually.
    dir: ./build
    deps:
      - post-build:snapshot:compress
    cmds:
      - |
        echo -n > memos_SHA256SUMS.txt
        for file in *.tar.gz *.zip; do
          sh -c "sha256sum $file >> memos_SHA256SUMS.txt"
        done || true
    sources:
      - "*.{zip,tar.gz}"
    generates:
      - memos_SHA256SUMS.txt

  build:snapshot:all:
    desc: Build binaries for ALL configured OS/Arch, ignores git status
    summary: &snapshot-summary |
      Snapshot builds bumps the patch version and appends -dev to the version string.
    deps: &snapshot-deps
      - build:backend-tidy
      - build:frontend
    sources: &snapshot-sources
      - ./.goreleaser-snapshot.yaml
      - ./memos-upstream/**/*.go
      - ./memos-upstream/**/go.{mod,sum}
      - ./memos-upstream/proto/**/*      
    generates: &snapshot-generates
      - ./build/backend/memos*/memos*
      - ./build/*.{zip,tar.gz}
      - ./build/memos_SHA256SUMS.txt
    cmds:
      - goreleaser build --snapshot --clean --timeout 60m --config .goreleaser-snapshot.yaml
      - task: post-build:snapshot:compress
      - task: post-build:snapshot:gen-checksums
  ##### /CI #####

  ##### Local #####
  build:snapshot:
    desc: Build binaries for current OS/Arch, ignores git status
    summary: *snapshot-summary
    deps: *snapshot-deps
    sources: *snapshot-sources
    generates: *snapshot-generates
    cmds:
      - goreleaser build --snapshot --clean --single-target --config .goreleaser-snapshot.yaml
      - task: post-build:snapshot:compress
      - task: post-build:snapshot:gen-checksums

  build:
    desc: Build binaries for current OS/Arch
    summary: |
      This won't work if git is dirty.
    deps:
      - build:backend-tidy
      - build:frontend
    cmds:
      - goreleaser build --clean --single-target

  build:all:
    desc: Build binaries for all OS/Arch
    summary: |
      This won't work if git is dirty.
    deps:
      - build:backend-tidy
      - build:frontend
    cmds:
      - goreleaser build --clean --timeout 60m

  release:
    desc: Release binaries to GitHub
    summary: |
      Requires GITHUB_TOKEN environment variable to be set.
      This token must have `write:packages` permission.
    deps:
      - build:backend-tidy
      - build:frontend
    cmds:
      - goreleaser release --clean --timeout 60m

  clean:
    desc: Clean-up all build artifacts
    cmds:
      - for:
          - "./build"
          - "./memos-upstream/web/node_modules"
          - "./memos-upstream/web/dist"
          - "./memos-upstream/server/frontend/dist"
          - "./memos-upstream/server/frontend/dist.bak"
        cmd: sh -c 'rm -rf "{{ .ITEM }}"'

  ##### /Local #####

  default:
    silent: true
    preconditions:
      - sh: "! [ -z $(command -v sh) ]"
        msg: "sh not found. Please install git from https://git-scm.com/downloads and add it to PATH."
      - sh: "! [ -z $(command -v go) ]"
        msg: |
          go not found. Please install it from https://golang.org/doc/install
          If it's installed with gobrew or similar, make sure to run `gobrew use` before running this task.
      - sh: "! [ -z $(command -v goreleaser) ]"
        msg: "goreleaser not found. Please install it from https://goreleaser.com/install/"
      - sh: "! [ -z $(command -v node) ]"
        msg: |
          node not found. Please install version 20 from https://nodejs.org/en/download/
          If it's installed with nvm or similar, make sure to run `nvm use 20` before running this task.
      - sh: "! [ -z $(command -v pnpm) ]"
        msg: "pnpm not found. Please install it from https://pnpm.io/installation"
      - sh: "! [ -z $(command -v buf) ]"
        msg: "buf not found. Please install it from https://docs.buf.build/installation"
    cmds:
      - echo -e "\e[36mAll requirements are met.\e[0m\n"
      - task --list

  ##### Git-related #####
  git:reset:
    desc: Reset main branch to origin/main
    prompt: |-
      This will exclude ALL untracked files and changes on the working tree,
      reseting the local repo to origin/main.
      Are you sure?
    cmds:
      - git fetch origin
      - git checkout main
      - git reset --hard origin/main
      - git clean -fdx
      - git checkout -

  git:subtree:pull-latest:
    desc: |
      Pull latest commit from Memos subtree.
      Note: requires a clean git state. `memos-upstream` folder will be reset.
    cmds:
      - git subtree pull --prefix=memos-upstream https://github.com/usememos/memos.git main --squash --message="Checkout memos-upstream to latest commit"
      - git reset -fx memos-upstream

  git:subtree:pull-tag:
    desc: |
      Pull a specific tag from Memos subtree.
      Usage: `task git:subtree:pull-tag -- v0.0.0`.
      Note: requires a clean git state.
    cmds:
      - git subtree pull --prefix=memos-upstream https://github.com/usememos/memos.git tags/{{.CLI_ARGS}} --squash --message="Checkout memos-upstream to {{.CLI_ARGS}}"
      - git reset -fdx memos-upstream

  git:subtree:reset:
    desc: Reset subtree.
    cmds:
      - sh -c "rm -rf ./memos-upstream"
      - git rm -fr memos-upstream --ignore-unmatch
      - git commit -m "Remove memos-upstream subtree"
      - git subtree add --prefix=memos-upstream https://github.com/usememos/memos.git main --squash --message="Reset memos-upstream subtree"

  git:tag:push:
    desc: |
      Checkout subtree to supplied tag and push a new tag to origin.
      Usage: `task git:tag:push -- v0.0.0`.
    summary: |
      This will trigger the GitHub Action to build and release the binaries.
    cmds:
      - git subtree pull --prefix=memos-upstream https://github.com/usememos/memos.git tags/{{.CLI_ARGS}} --squash --message="Checkout memos-upstream to {{.CLI_ARGS}}"
      - git push origin
      - git tag -a {{.CLI_ARGS}} -m "Push {{.CLI_ARGS}}"
      - git push origin {{.CLI_ARGS}}

  git:tag:delete:
    desc: |
      Delete a git tag.
      Usage: `task git:tag:delete -- v0.0.0`.
    summary: |
      Used in case the CI pipeline fails and some correction is needed.

      Goreleaser demands a tag commit to be verifiable (due to gomod.proxy=true setting),
        so the tag must be made right before the build is triggered.
    cmds:
      - git push origin :refs/tags/{{.CLI_ARGS}}
      - git tag -d {{.CLI_ARGS}}
  ##### /Git-related #####
