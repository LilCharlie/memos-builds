# https://taskfile.dev/#/installation

# To use this Taskfile on Windows, add Git\usr\bin to PATH.
# This allows using Git's bundled GNU Core Utils (rm, mv, etc).
#
# To add git\usr\bin to the current powershell session PATH:
#* $Env:Path += ";$Env:ProgramFiles\Git\usr\bin";

version: "3"
env:
  RED:
    sh: tput -T xterm-256color setaf 1
  GREEN:
    sh: tput -T xterm-256color setaf 2
  CYAN:
    sh: tput -T xterm-256color setaf 6
  RESET:
    sh: tput -T xterm-256color sgr0

tasks:
  ##### CI #####
  build:frontend:
    desc: Build front-end
    dir: ./memos-upstream/web
    vars:
      SRC: ./dist
      DST: ../../build/frontend
    sources:
      - ../proto/**/*.{proto,go,yaml,lock}
      - src/!(node_modules)/**/*.{ts,tsx,js,css,less,json,html}
      - src/*.{ts,js,json,html}
      - pnpm-lock.yaml
    generates:
      - "{{.DST}}/dist/**/*"
    cmds:
      - silent: true
        cmd: |
          echo "{{.CYAN}}Cleaning up leftovers...{{.RESET}}"
          rm -rf "{{.SRC}}"
          rm -rf "{{.DST}}/{{.SRC}}"
          mkdir -p "{{.DST}}"

      - pnpm i --frozen-lockfile
      - pnpm type-gen
      - pnpm build
      - silent: true
        cmd: |
          echo "Moving front-end build..."
          mv -f "{{.SRC}}" "{{.DST}}"
          if ! [ -d "{{.DST}}" ]; then
            echo "{{.RED}}>> Front-end build failed! <<{{.RESET}}"
            exit 1
          fi
          echo "{{.GREEN}}>> Front-end build succeeded. <<{{.RESET}}"

  build:backend-tidy:
    desc: Tidy backend dependencies
    dir: ./memos-upstream
    cmds:
      - go mod tidy -go=1.21
    sources:
      - "./**/go.{mod,sum}"

  pre-docker:rename-builds:
    desc: Rename builds to Docker format
    dir: ./build/backend
    sources:
      - ./memos*amd64_v*/memos
      - ./memos*arm_*/memos
      - ./memos*arm64/memos
    generates:
      - ./memos*amd64*/memos
      - ./memos*arm32v*/memos
      - ./memos*arm64v8/memos
    cmds:
      - silent: true
        cmd: |
          set -eu
          echo "{{.CYAN}}Renaming builds to Docker format...{{.RESET}}"
          for dir in ./memos*; do
            if [[ ! -d "${dir}" ]]; then
              continue
            fi

            already_renamed=$(echo "${dir}" | grep -E "arm32v[5-7]|arm64v8|amd64v[2-4]|i386" || true)
            if [[ -n "${already_renamed}" ]]; then
              continue
            fi

            new_name="${dir}"
            new_name="${new_name//amd64_v1/amd64}"
            new_name="${new_name//_386/_i386}"
            new_name=$(echo "${new_name}" | sh -c 'sed -E "s/(amd64_v)([2-4])/amd64v\2/"')
            new_name=$(echo "${new_name}" | sh -c 'sed -E "s/(arm_)([5-7])/arm32v\2/"')

            if [[ "${new_name}" == "${dir}" ]]; then
              continue
            fi

            dir=${dir//\\//}
            new_name=${new_name//\\//}

            echo "Renaming ${dir} to ${new_name}"
            mv -f "$dir" "$new_name"
          done

  build:nightly:all:
    desc: "[CI] Build binaries for ALL configured OS/Arch, ignores git status"
    summary: &nightly-summary |
      Snapshot builds bumps the patch version and appends -dev to the version string.
    deps: &nightly-deps
      - build:backend-tidy
      - build:frontend
    sources: &nightly-sources
      - .goreleaser-nightly.yaml
      - memos-upstream/**/*.go
      - memos-upstream/**/go.{mod,sum}
      - memos-upstream/proto/**/*
    generates: &nightly-generates
      - build/backend/memos_*/memos
      - build/backend/*.{zip,tar.gz}
      - build/backend/memos_SHA256SUMS.txt
    cmds:
      - goreleaser release --snapshot --clean --timeout 60m --config .goreleaser-nightly.yaml
      - task: pre-docker:rename-builds

  ##### /CI #####

  ##### Local #####
  build:nightly:
    desc: Build binaries for current OS/Arch, ignores git status
    summary: *nightly-summary
    deps: *nightly-deps
    sources: *nightly-sources
    generates: *nightly-generates
    cmds:
      - goreleaser release --snapshot --clean --single-target --config .goreleaser-nightly.yaml

  build:nightly:docker:
    desc: Build Docker images for ALL configured OS/Arch, ignores git status
    env:
      DOCKER_BUILDKIT: 1
    deps:
      - build:nightly:all
    ignore_error: true
    cmds:
      - for:
          - linux/amd64
          # - linux/amd64v2
          # - linux/amd64v3
          # - linux/arm32v5
          - linux/arm32v6
          # - linux/arm32v7
          - linux/arm64
          # - linux/i386
          - linux/riscv64
        silent: true
        cmd: |
          container_name='memos-nightly-{{ .ITEM | replace "/" "-" }}'
          docker buildx build --tag ${container_name} --file ./docker/Dockerfile . --platform={{ .ITEM }}
          if [ $? -ne 0 ]; then
            echo "{{.RED}}>> Docker build failed for {{ .ITEM }} <<{{.RESET}}"
          fi
          docker rm -f ${container_name} >/dev/null 2>&1 || true
          docker run -p "0:5230" -d --init --rm --name ${container_name} --platform {{ .ITEM }} ${container_name}
          if [ $? -ne 0 ]; then
            echo "{{.RED}}>> Failed to run container {{ .ITEM }} <<{{.RESET}}"
          fi
      - docker ps

  build:
    desc: Build without publishing
    summary: |
      Requires a clean git state.
    deps:
      - build:backend-tidy
      - build:frontend
    cmds:
      - goreleaser release --clean --skip=publish --timeout 60m

  release:
    desc: Release binaries to GitHub
    summary: |
      Requires GITHUB_TOKEN environment variable to be set.
      This token must have `write:packages` permission.
    deps:
      - build:backend-tidy
      - build:frontend
    cmds:
      - goreleaser release --clean --timeout 60m

  clean:
    desc: Clean-up all build artifacts
    cmds:
      - for:
          - "./build"
          - "./memos-upstream/web/node_modules"
          - "./memos-upstream/web/dist"
          - "./memos-upstream/server/frontend/dist"
          - "./memos-upstream/server/frontend/dist.bak"
        cmd: rm -rf "{{ .ITEM }}"
      - docker builder prune -f
      - docker buildx prune -f
      - docker volume prune -f
      - docker image prune -f

  ##### /Local #####
  default:
    silent: true
    cmds:
      - for:
          - "sh"
          - "go"
          - "goreleaser"
          - "node"
          - "pnpm"
        cmd: |
          if [[ -z $(command -v "{{ .ITEM }}") ]]; then
            echo '{{.RED}}{{ .ITEM }}" not found.{{.RESET}}'
            echo "Please install it before running tasks."
            exit 1
          fi
      - echo -e "{{.CYAN}}All task requirements are met.{{.RESET}}\n"
      - task --list

  ##### Git-related #####
  git:reset:
    desc: Reset main branch to origin/main
    prompt: |-
      This will exclude ALL untracked files and changes on the working tree,
      reseting the local repo to origin/main.
      Are you sure?
    cmds:
      - git fetch origin
      - git checkout main
      - git reset --hard origin/main
      - git clean -fdx
      - git checkout -

  git:subtree:pull:
    desc: |
      Pull a specific commit from Memos upstream.
      Usage: `task git:subtree:pull -- 1234567890`.
      Notes: 
        - requires a clean git state.
        - `memos-upstream` folder will be reset.
    silent: true
    cmds:
      - |
        git subtree pull --prefix=memos-upstream https://github.com/usememos/memos.git {{.CLI_ARGS}} --squash --message="chore:ci: checkout memos-upstream to {{.CLI_ARGS}}"
        git clean -fx memos-upstream
        git add -A
        git commit -am "chore:ci: clean leftovers from memos-upstream subtree" || true

  git:subtree:pull-latest:
    desc: |
      Pull latest commit from Memos upstream.
      Usage: `task git:subtree:pull-latest`.
    cmds:
      - task git:subtree:pull -- main

  git:subtree:pull-tag:
    desc: |
      Pull a specific tag from Memos upstream.
      Usage: `task git:subtree:pull-tag -- v0.0.0`.
    cmds:
      - task git:subtree:pull -- tags/v{{trimPrefix "v" .CLI_ARGS}}

  git:subtree:pull-release:
    desc: |
      Pull a specific release from Memos upstream.
      Usage: `task git:subtree:pull-release -- v0.0.0`.
    cmds:
      - task git:subtree:pull -- heads/release/{{trimPrefix "v" .CLI_ARGS}}

  git:retag:
    desc: |
      Remove a git tag and push it again.
      Usage: `task git:retag -- v0.0.0`.
    summary: |
      Used in case the CI pipeline fails and some correction is needed.

      Goreleaser demands a tag commit to be verifiable,
        so the tag must be made right before the build is triggered.
    cmds:      
      - git push origin :refs/tags/{{.CLI_ARGS}}
      - git tag -d {{.CLI_ARGS}}
      - git tag -a {{.CLI_ARGS}} -m "Tag {{.CLI_ARGS}}"
      - git push origin {{.CLI_ARGS}}
  
  git:tag:delete:
    desc: |
      Delete a git tag.
      Usage: `task git:tag:delete -- v0.0.0`.
    summary: |
      Used in case the CI pipeline fails and some correction is needed.

      Goreleaser demands a tag commit to be verifiable (due to gomod.proxy=true setting),
        so the tag must be made right before the build is triggered.
    cmds:
      - git push origin :refs/tags/{{.CLI_ARGS}}
      - git tag -d {{.CLI_ARGS}}

  git:tag:push:
    desc: |
      Checkout subtree to supplied tag and push a new tag to origin.
      Usage: `task git:tag:push -- v0.0.0`.
    summary: |
      This will trigger the GitHub Action to build and release the binaries.
    cmds:
      - git subtree pull --prefix=memos-upstream https://github.com/usememos/memos.git tags/{{.CLI_ARGS}} --squash --message="Checkout memos-upstream to {{.CLI_ARGS}}"
      - git push origin
      - git tag -a {{.CLI_ARGS}} -m "Push {{.CLI_ARGS}}"
      - git push origin {{.CLI_ARGS}}

  ##### /Git-related #####
