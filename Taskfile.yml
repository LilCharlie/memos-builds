# https://taskfile.dev/#/installation

# To use this Taskfile on Windows, add Git\usr\bin to PATH.
# This allows using Git's bundled GNU Core Utils (rm, mv, etc).
#
# To add git\usr\bin to the current powershell session PATH:
#* $Env:Path += ";$Env:ProgramFiles\Git\usr\bin";

version: "3"
env:
  CYAN: \033[96m
  GREEN: \033[92m
  RED: \033[91m
  RESET: \033[0m
  DARK_RED: \033[31m
  DARK_YELLOW: \033[33m

tasks:
  ##### CI #####
  # ci:setup-nightly-env: python scripts/ci.py setup-env --nightly
  # ci:setup-release-env: python scripts/ci.py setup-env

  build:frontend:
    desc: Build front-end
    dir: ./memos-upstream
    sources:
      - proto/**/*.{proto,yaml,lock}
      - web/src/!(node_modules)/**/*.{ts,tsx,js,css,less,json,html,png,webp}
      - web/src/*.{ts,js,json,html}
      - web/pnpm-lock.yaml
    generates: ["../build/frontend/dist/**/*"]
    cmds:
      - >-
        python ../scripts/ci.py build-frontend
        --source=./web
        --dist=./web/dist
        --final=../build/frontend

  build:backend-tidy:
    desc: Tidy go.mod
    dir: ./memos-upstream
    cmds: [go mod tidy -go=1.21]
    sources: ["./**/go.{mod,sum}"]

  build:backend-nightly:
    desc: "[CI] Build nightly binaries for ALL configured OS/Arch, ignores git status"
    deps: [build:backend-tidy]
    sources: &nightly-sources
      - .goreleaser.yaml
      - memos-upstream/**/*.go
      - memos-upstream/**/go.{mod,sum}
      - memos-upstream/proto/**/*
    generates: &nightly-generates
      - build/backend/memos_*/memos
      - build/backend/*.{zip,tar.gz}
      - build/backend/memos_SHA256SUMS.txt
    cmds:
      - goreleaser release --snapshot --clean --timeout 60m --config .goreleaser.yaml

  ##### /CI #####

  ##### Local #####
  build:nightly:single:
    desc: Build a single nightly binary for current OS/Arch, ignores git status.
    deps: &backend-deps [build:backend-tidy, build:frontend]
    sources: *nightly-sources
    generates: *nightly-generates
    cmds:
      - goreleaser build --snapshot --clean --single-target --config .goreleaser.yaml

  build:nightly:
    desc: "[CI] Build nightly binaries for all configured OS/Arch, ignores git status"
    deps: [build:frontend, build:backend-nightly]

  build:testing:
    desc: Build Docker-targeted binaries, ignores git status.
    deps: *backend-deps
    sources: *nightly-sources
    generates: [build/backend/memos_linux_*/memos]
    cmds:
      - goreleaser release --snapshot --clean --skip-publish --config .goreleaser-testing.yaml
      - python scripts/ci.py rename-to-docker

  build:testing:docker:
    desc: Build local testing images.
    env:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: enabled
    ignore_error: true
    deps: [build:testing]
    cmds:
      - for:
          - linux/386
          - linux/amd64
          - linux/amd64/v2
          - linux/amd64/v3
          - linux/armv5 # CI=linux/arm/v5
          - linux/armv6 # CI=linux/arm/v6
          - linux/armv7 # CI=linux/arm/v7
          - linux/arm64
          - linux/ppc64le
          - linux/riscv64
          - linux/s390x
        silent: true
        cmd: |
          container_name='memos-testing-{{ .ITEM | replace "/" "-" }}'
          docker rm -f ${container_name} || true
          docker ps -a -q --filter ancestor=${container_name} --format="{{.ID}}" | xargs -r docker rm -f || true
          docker image rm -f ${container_name} || true
          docker image prune -f
          docker volume prune -f
          docker buildx build --tag ${container_name} --file ./docker/Dockerfile . --platform={{ .ITEM }}

          if [ $? -ne 0 ]; then
            echo "{{.RED}}>> Docker build failed for {{ .ITEM }} <<{{.RESET}}"
          fi

          docker run --detach --init --rm --name ${container_name} \
            --publish "0:5230" --env MEMOS_MODE=demo \
            --env TZ=America/Sao_Paulo \
          #   --volume /usr/share/zoneinfo:/usr/share/zoneinfo:ro \
            --platform {{ .ITEM }} ${container_name}

          if [ $? -ne 0 ]; then
            echo "{{.RED}}>> Failed to run container {{ .ITEM }} <<{{.RESET}}"
          fi
      - docker ps

  build:
    desc: Build without publishing
    summary: Requires a clean git state.
    deps: [build:backend-tidy, build:frontend]
    cmds: [goreleaser release --clean --skip=publish --timeout 60m]

  release:
    desc: Release binaries to GitHub
    summary: |
      - Requires GITHUB_TOKEN environment variable to be set. The token must have `write:packages` permission.
      - A git tag must be created right before running this task.
      - Git must be clean.
    deps: [build:backend-tidy, build:frontend]
    cmds: [goreleaser release --clean --timeout 60m]

  clean:
    desc: Clean-up all build artifacts
    cmds:
      - for:
          - "./build"
          - "./memos-upstream/web/node_modules"
          - "./memos-upstream/web/dist"
          - "./memos-upstream/server/frontend/dist"
          - "./memos-upstream/server/frontend/dist.bak"
        cmd: rm -rf "{{ .ITEM }}"
      - docker builder prune -f
      - docker buildx prune -f
      - docker volume prune -f
      - docker image prune -f

  ##### /Local #####

  default:
    silent: true
    cmds:
      - for: ["buf", "go", "goreleaser", "node", "pnpm", "python"]
        cmd: |
          printf "Looking for {{.CYAN}}{{ .ITEM }}{{.RESET}}... \n"
          if [[ -z $(command -v "{{ .ITEM }}") ]]; then
            printf "{{.DARK_YELLOW}}{{ .ITEM }}{{.DARK_RED}} not found.{{.RESET}}\n"
            printf "Please install it before running tasks.\n"
            exit 1
          fi
      - printf "{{.GREEN}}All basic requirements for this project are met.{{.RESET}}\n"
      - printf 'Use "task --list" to see available tasks.\n'

  ##### Git-related #####
  git:reset:
    desc: Reset main branch to origin/main
    prompt: |-
      This will exclude ALL untracked files and changes on the working tree,
      reseting the local repo to origin/main.
      Are you sure?
    cmds:
      - git fetch origin
      - git checkout main
      - git reset --hard origin/main
      - git clean -fdx
      - git checkout -

  git:subtree:pull:
    desc: |
      Pull a specific commit from Memos upstream.
      Usage: `task git:subtree:pull -- 1234567890`.
      Notes:
        - requires a clean git state.
        - `memos-upstream` folder will be reset.
    silent: true
    cmds: ["python scripts/ci.py pull-subtree --branch={{.CLI_ARGS}}"]

  git:subtree:pull-latest:
    desc: Pull latest changes from usememos/memos:main to subtree
    cmds: [python scripts/ci.py pull-subtree --branch=main]

  git:subtree:pull-tag:
    desc: |
      Pull a specific tag from usememos/memos.
      Usage: `task git:subtree:pull-tag -- v0.0.0`.
    cmds:
      - |
        tag="v{{print .CLI_ARGS | trimPrefix "v" }}"
        python scripts/ci.py pull-subtree --branch=tags/${tag}

  git:subtree:pull-release:
    desc: |
      Pull a specific release from usememos/memos.
      Usage: `task git:subtree:pull-release -- 0.0.0`.
    cmds:
      - |
        tag="{{print .CLI_ARGS | trimPrefix "v" }}"
        python scripts/ci.py pull-subtree --branch=heads/release/${tag}

  git:retag:
    desc: |
      Remove a git tag and push it again.
      Usage: `task git:retag -- v0.0.0`.
    summary: |
      Used in case the CI pipeline fails and some correction is needed.

      Goreleaser demands a tag commit to be verifiable,
        so the tag must be made right before the build is triggered.
    ignore_error: true
    cmds:
      - |
        tag="v{{print .CLI_ARGS | trimPrefix "v" }}"
        git push origin :refs/tags/${tag}
        git tag -d ${tag}
        git tag -a ${tag} -m "Tag ${tag}"
        git push origin ${tag}

  git:tag:push:
    desc: |
      Checkout subtree to supplied release and push a new tag to origin.
      Usage: `task git:tag:push -- v0.0.0`.
    summary: This will trigger the GitHub Action to build and release the binaries.
    cmds:
      - task git:subtree:pull-release -- {{.CLI_ARGS}}
      - task git:retag -- {{.CLI_ARGS}}
      - git push origin main

  ##### /Git-related #####
