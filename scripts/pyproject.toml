# Ruff Python Linter Configuration
# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
line-length = 96
target-version = 'py310' # Python 3.10 is available at GitHub Actions "Ubuntu 22.04" runners.
select = [
    # https://github.com/astral-sh/ruff?tab=readme-ov-file#rules
    'A',   # flake8-builtins
    'ANN', # flake8-annotations
    'ARG', # flake8-unused-arguments
    'B',   # flake8-bugbear
    'BLE', # flake8-blind-except
    'C',   # mccabe-complexity
    'C4',  # flake8-comprehensions
    'D',   # pydocstyle
    'DTZ', # flake8-datetimez: Check for naive datetime objects
    'E',   # pycodestyle
    'EM',  # flake8-errmsg
    # 'ERA', # erradicate-commented-out-code: not useful on non-git repos
    'F',   # pyflakes
    'FBT', # flake8-boolean-trap
    'I',   # isort
    'ICN', # flake8-import-conventions
    'ISC', # flake8-implicit-str-concat
    'N',   # pep8-naming
    'PD',  # pandas-vet
    'PGH', # pygrep-hooks
    'PIE', # flake8-pie
    'PLC', # pylint-convention
    'PLE', # pylint-error
    'PLR', # pylint-refactor
    'PLW', # pylint-warnings
    'PT',  # flake8-pytest-style
    'Q',   # flake8-quotes
    'RET', # flake8-return
    'RUF', # ruff
    'S',   # flake8-bandit
    'SIM', # flake8-simplify
    'T10', # flake8-debugger
    # 'T20', # flake8-print: Check for Print statements in python files.
    'TID', # flake8-tidy-imports
    'UP',  # pyupgrade
    'W',   # pycodestyle
    'YTT', # flake8-2020
]
ignore = [
    'A003',   # Attribute is shadowing a Python builtin
    'ANN101', # Missing type annotation for self in class method
    'ANN102', # Missing type annotation for cls in classmethod
    # 'ANN401', # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    'D100', # Missing docstring in public module
    'D101', # Missing docstring in public class
    'D102', # Missing docstring in public method
    'D103', # Missing docstring in public function
    'D200', # One-line docstring should fit on one line with quotes
    # 'D202', # No blank lines allowed after function docstring
    'D203', # 1 blank line required before class docstring
    # 'D204', # 1 blank line required after class docstring
    # 'D205', # 1 blank line required between summary line and description
    # 'D211', # No blank lines allowed before class docstring
    'D212', # Multi-line docstring summary should start at the first line
    # 'D213', # Multi-line docstring summary should start at the second line
    # 'D215', # Section underline is over-indented
    # 'D400', # First line should end with a period
    # 'D404', # First word of the docstring should not be "This"
    # 'D406', # Section name should end with a newline
    # 'D407', # Missing dashed underline after section
    # 'D408', # Section underline should be in the line following the section's name
    # 'D409', # Section underline should match the length of its name
    # 'D411', # Missing blank line before section
    # 'D413', # Missing blank line after last section
    # The following are not fit for complex codebases.
    'PLR0911', # Too many return statements
    'PLR0912', # Too many branches
    'PLR0913', # Too many arguments to function call
    'PLR0915', # Too many statements
    'PLR2004', # Magic value used in comparison
    'C901',    # Function is too complex
    'S602',    # `subprocess` call with `shell=True` identified, security issue
    'S603',    # subprocess call - check for execution of untrusted input
    'S607',    # start process with a partial path
]

fix = true
# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = []
# unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    '__pycache__',
    '.fleet',
    '.git',
    '.idea',
    '.mypy_cache',
    '.ruff_cache',
    '.venv',
    '.vscode',
    'build',
    'dist',
    'memos',
    'node_modules',
    'venv',
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"*test.py" = ["S101", "ANN201", "D101", "D102", "D103", "PLR2004", "PT009"]
"test*.py" = ["S101", "ANN201", "D101", "D102", "D103", "PLR2004", "PT009"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.mccabe]
max-complexity = 10


# Pyright Configuration
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
[tool.pyright]

include = ["."]
exclude = ["**/__pycache__"]
ignore = ["**/deprecated"]

venv = ".venv"
pythonVersion = "3.10"
pythonPlatform = "All"

executionEnvironments = [
    { root = ".", pythonVersion = "3.10", pythonPlatform = "Windows", extraPaths = [
        ".",
    ] },
]

# strict = ["**/*.py"]
reportAssertAlwaysTrue = "error"
reportCallInDefaultInitializer = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportImplicitOverride = "error"
reportImplicitStringConcatenation = "error"
reportImportCycles = "warning"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = "error"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = "warning"
reportSelfClsParameterName = "error"
reportShadowedImports = "warning"
reportTypeCommentUsage = "error"
reportUninitializedInstanceVariable = "warning"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportUnusedCallResult = "warning"
reportUnusedClass = "error"
reportUnusedExpression = "error"
reportUnusedFunction = "error"
reportUnusedImport = "error"
reportUnusedVariable = "error"
reportWildcardImportFromLibrary = "error"
strictDictionaryInference = true
strictListInference = true
strictSetInference = true


# Black Code Formatter Configuration
[tool.black]
line-length = 96
target-version = ['py311']
include = '\.pyi?$'
# If `exclude` is not set, Black will automatically ignore files and directories in existing .gitignore files.
# Use `extend-exclude` to add additional files and directories to those found in .gitignore files.
extend-exclude = '''
/(
    | profiling
)/
'''
