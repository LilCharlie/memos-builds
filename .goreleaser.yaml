# https://goreleaser.com

project_name: memos
dist: build/backend
builds:
  - dir: ./memos-upstream
    main: ./bin/memos
    binary: memos
    env:
      - CGO_ENABLED=0
      - GO111MODULE=on

    # Notes on build targets:
    # - modernc.org/libc doesn't support Windows i386 and any sort of MIPS architecture:
    #   https://pkg.go.dev/modernc.org/sqlite#hdr-Supported_platforms_and_architectures
    goos:
      - darwin
      # - freebsd
      - linux
      - windows
    goarch:
      - '386'
      - amd64
      - arm
      - arm64
      # - ppc64le
      - riscv64
      # - s390x
    goarm:
      - "5" # use software floating point; for CPUs without a VFP co-processor
      - "6" # use VFPv1 only; usually ARM11 or better cores (VFPv2 or better is also supported)
      - "7" # use VFPv3; Cortex-A cores
    goamd64:
      - v1 # baseline: all x86_64 CPUs
      - v2 # CMPXCHG16B, LAHF, SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3 (circa 2009: Intel Nehalem/circa 2013: AMD Jaguar)
      - v3 # AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, OSXSAVE (circa 2015: Intel Haswell and AMD Excavator)
      # - v4 # AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL
    ignore:
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: "386"
    flags: >-
      -trimpath
    ldflags: >-
      -s
      -w
      -X main.Date={{.CommitDate}}
    #  -X github.com/usememos/memos/server/version.Version={{ trimprefix .Version "v" }}
    #  -X github.com/usememos/memos/server/version.DevVersion={{ trimprefix .Version "v" }}
    mod_timestamp: "{{ .CommitTimestamp }}"

upx:
  # Note:
  # - freebsd/*, windows/arm64, */riscv64, */s390x aren't supported by upx
  # - Using UPX on Windows may cause false-positives with some antivirus software.
  - enabled: true
    goos: [linux]
    goarch: [arm, arm64, "386", amd64, ppc64le]
    compress: "best"
    lzma: true

archives:
  - format: tar.gz
    # this template makes the OS and Arch more compatible with `uname` output.
    name_template: >-
      {{ .ProjectName }}-{{ .Tag }}-{{- .Os }}-
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}l{{ end -}}
      {{- if .Amd64 }}{{- if ne .Amd64  "v1" }}_{{ .Amd64 }}{{ end -}}{{ end -}}
    builds_info:
      group: root
      owner: root
      mode: 0644
    format_overrides:
      - goos: windows
        format: zip
    files:
      # add front-end to compressed archives
      - src: build/frontend/dist/
        dst: dist

changelog:
  skip: true
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^chore:"
      - "^refactor:"
      - "^style:"
      - "^ci:"
      - "^perf:"
      - "^build:"

gomod:
  # Proxy a module from proxy.golang.org, making the builds verifiable.
  #
  # This will only be effective if running against a tag. Snapshots will ignore this setting.
  # Notice: for this to work your `build.main` must be a package, not a `.go` file.
  # Can only be enabled on an unaltered repo, since the tag commit must be verifiable and goreleaser demands a clean git state.
  proxy: true

  # If proxy is true, use these environment variables when running `go mod`
  # commands (namely, `go mod tidy`).
  #
  # Default: `os.Environ()` merged with what you set the root `env` section.
  env:
    - GOPROXY=https://proxy.golang.org,direct
    - GOSUMDB=sum.golang.org

checksum:
  disable: false
  name_template: "{{ .ProjectName }}_SHA256SUMS.txt"
  algorithm: sha256 # [sha256] sha512 sha1 crc32 md5 sha224 sha384

# Generates a full build, but neither validate anything nor upload it to anywhere.
# goreleaser --snapshot --skip-publish --rm-dist
snapshot:
  # Default is `{{ .Version }}-SNAPSHOT-{{.ShortCommit}}`.
  name_template: "{{ incpatch .Version }}-dev"

release:
  github:
    owner: lincolnthalles
    name: memos-builds

  # If set to true, will not auto-publish the release.
  draft: true

  # If set, will create a release discussion in the category specified.
  # Warning: do not use categories in the 'Announcement' format.
  discussion_category_name: General

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will always mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # If set to false, will NOT mark the release as "latest".
  # This prevents it from being shown at the top of the release list,
  # and from being returned when calling https://api.github.com/repos/OWNER/REPO/releases/latest.
  make_latest: true

  # What to do with the release notes in case there the release already exists.
  #
  # Valid options: [keep-existing] | append | prepend | replace
  mode: append

  # Templates: allowed
  # header: |
  #   ## Some title ({{ .Date }})

  #   Welcome to this new release!
  footer: |
    **[Official Memos upstream changelog](https://github.com/usememos/memos/releases/tag/{{ .Tag }})**

  skip_upload: false

dockers:
  - use: buildx
    dockerfile: docker/Dockerfile-goreleaser
    goos: linux
    goarch: amd64
    image_templates: &image_templates
      - &ghcr_amd64 "ghcr.io/lincolnthalles/memos-builds:{{ .Tag }}-amd64"
      - &dockerhub_amd64 "lincolnthalles/memos-builds:{{ .Tag }}-amd64"
    build_flag_templates: ["--platform=linux/amd64"]
    extra_files: &extra_files [build/frontend/dist, docker/entrypoint.sh]
  
  - use: buildx
    dockerfile: docker/Dockerfile-goreleaser
    goos: linux
    goarch: arm
    goarm: 6
    image_templates:
      - &ghcr_arm32v6 "ghcr.io/lincolnthalles/memos-builds:{{ .Tag }}-arm32v6"
      - &dockerhub_arm32v6 "lincolnthalles/memos-builds:{{ .Tag }}-arm32v6"
    build_flag_templates: ["--platform=linux/arm32/v6"]
    extra_files: *extra_files
  
  - use: buildx
    dockerfile: docker/Dockerfile-goreleaser
    goos: linux
    goarch: arm64
    image_templates:
      - &ghcr_arm64 "ghcr.io/lincolnthalles/memos-builds:{{ .Tag }}-arm64"
      - &dockerhub_arm64 "lincolnthalles/memos-builds:{{ .Tag }}-arm64"
    build_flag_templates: ["--platform=linux/arm64"]
    extra_files: *extra_files

  - use: buildx
    dockerfile: docker/Dockerfile-goreleaser
    goos: linux
    goarch: riscv64
    image_templates:
      - &ghcr_riscv64 "ghcr.io/lincolnthalles/memos-builds:{{ .Tag }}-riscv64"
      - &dockerhub_riscv64 "lincolnthalles/memos-builds:{{ .Tag }}-riscv64"
    build_flag_templates: ["--platform=linux/riscv64"]
    extra_files: *extra_files

docker_manifests:
  # https://goreleaser.com/customization/docker_manifest/
  - name_template: ghcr.io/lincolnthalles/memos-builds:latest
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
  - name_template: ghcr.io/lincolnthalles/memos-builds:{{ .Tag }}
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
  - name_template: ghcr.io/lincolnthalles/memos-builds:v{{ .Major }}.{{ .Minor }}"
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
  - name_template: lincolnthalles/memos-builds:latest
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
  - name_template: lincolnthalles/memos-builds:{{ .Tag }}
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
  - name_template: lincolnthalles/memos-builds:v{{ .Major }}.{{ .Minor }}"
    image_templates:
      - *dockerhub_amd64
      - *dockerhub_arm32v6
      - *dockerhub_arm64
      - *dockerhub_riscv64
      - *ghcr_amd64
      - *ghcr_arm32v6
      - *ghcr_arm64
      - *ghcr_riscv64
